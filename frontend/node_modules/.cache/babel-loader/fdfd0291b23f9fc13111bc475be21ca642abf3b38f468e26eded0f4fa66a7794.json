{"ast":null,"code":"import config from '../config';\nclass ApiService {\n  constructor() {\n    this.baseURL = config.API_BASE_URL;\n    this.timeout = config.REQUEST_TIMEOUT;\n  }\n  async request(endpoint, options = {}) {\n    const url = `${this.baseURL}${endpoint}`;\n    const defaultOptions = {\n      timeout: this.timeout,\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers\n      }\n    };\n\n    // Se o body for FormData, não definir Content-Type\n    if (options.body instanceof FormData) {\n      delete defaultOptions.headers['Content-Type'];\n    }\n    try {\n      const response = await fetch(url, {\n        ...defaultOptions,\n        ...options\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('API Error:', error);\n      throw error;\n    }\n  }\n\n  // Autenticação\n  async login(usuario, senha) {\n    const formData = new FormData();\n    formData.append('usuario', usuario);\n    formData.append('senha', senha);\n    return this.request('/login', {\n      method: 'POST',\n      body: formData,\n      headers: {} // Remove Content-Type para FormData\n    });\n  }\n\n  // Upload de arquivos\n  async uploadFiles(comunicacoes, envolvidos, ocorrencias, usuario) {\n    const formData = new FormData();\n    formData.append('comunicacoes', comunicacoes);\n    formData.append('envolvidos', envolvidos);\n    formData.append('ocorrencias', ocorrencias);\n    formData.append('usuario', usuario);\n    return this.request('/upload', {\n      method: 'POST',\n      body: formData,\n      headers: {} // Remove Content-Type para FormData\n    });\n  }\n\n  // Dashboard\n  async getDashboardResumo() {\n    return this.request('/api/dashboard-resumo');\n  }\n  async getComunicacoes() {\n    return this.request('/api/comunicacoes');\n  }\n  async getComunicacaoDetalhe(id) {\n    return this.request(`/api/comunicacao/${id}`);\n  }\n\n  // Parsing\n  async parseInformacoes(banco, texto) {\n    return this.request(`/api/parse/${banco}`, {\n      method: 'POST',\n      body: JSON.stringify({\n        texto\n      })\n    });\n  }\n\n  // Health check\n  async ping() {\n    return this.request('/ping');\n  }\n\n  // Estatísticas\n  async getEstatisticas() {\n    return this.request('/api/estatisticas');\n  }\n}\nexport default new ApiService();","map":{"version":3,"names":["config","ApiService","constructor","baseURL","API_BASE_URL","timeout","REQUEST_TIMEOUT","request","endpoint","options","url","defaultOptions","headers","body","FormData","response","fetch","ok","Error","status","json","error","console","login","usuario","senha","formData","append","method","uploadFiles","comunicacoes","envolvidos","ocorrencias","getDashboardResumo","getComunicacoes","getComunicacaoDetalhe","id","parseInformacoes","banco","texto","JSON","stringify","ping","getEstatisticas"],"sources":["C:/Users/Gustavo/Desktop/RIF_1.2/rif-analisador/frontend/src/services/api.js"],"sourcesContent":["import config from '../config';\r\n\r\nclass ApiService {\r\n  constructor() {\r\n    this.baseURL = config.API_BASE_URL;\r\n    this.timeout = config.REQUEST_TIMEOUT;\r\n  }\r\n\r\n  async request(endpoint, options = {}) {\r\n    const url = `${this.baseURL}${endpoint}`;\r\n    const defaultOptions = {\r\n      timeout: this.timeout,\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        ...options.headers,\r\n      },\r\n    };\r\n\r\n    // Se o body for FormData, não definir Content-Type\r\n    if (options.body instanceof FormData) {\r\n      delete defaultOptions.headers['Content-Type'];\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(url, { ...defaultOptions, ...options });\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n      \r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('API Error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Autenticação\r\n  async login(usuario, senha) {\r\n    const formData = new FormData();\r\n    formData.append('usuario', usuario);\r\n    formData.append('senha', senha);\r\n    \r\n    return this.request('/login', {\r\n      method: 'POST',\r\n      body: formData,\r\n      headers: {}, // Remove Content-Type para FormData\r\n    });\r\n  }\r\n\r\n  // Upload de arquivos\r\n  async uploadFiles(comunicacoes, envolvidos, ocorrencias, usuario) {\r\n    const formData = new FormData();\r\n    formData.append('comunicacoes', comunicacoes);\r\n    formData.append('envolvidos', envolvidos);\r\n    formData.append('ocorrencias', ocorrencias);\r\n    formData.append('usuario', usuario);\r\n    \r\n    return this.request('/upload', {\r\n      method: 'POST',\r\n      body: formData,\r\n      headers: {}, // Remove Content-Type para FormData\r\n    });\r\n  }\r\n\r\n  // Dashboard\r\n  async getDashboardResumo() {\r\n    return this.request('/api/dashboard-resumo');\r\n  }\r\n\r\n  async getComunicacoes() {\r\n    return this.request('/api/comunicacoes');\r\n  }\r\n\r\n  async getComunicacaoDetalhe(id) {\r\n    return this.request(`/api/comunicacao/${id}`);\r\n  }\r\n\r\n  // Parsing\r\n  async parseInformacoes(banco, texto) {\r\n    return this.request(`/api/parse/${banco}`, {\r\n      method: 'POST',\r\n      body: JSON.stringify({ texto }),\r\n    });\r\n  }\r\n\r\n  // Health check\r\n  async ping() {\r\n    return this.request('/ping');\r\n  }\r\n\r\n  // Estatísticas\r\n  async getEstatisticas() {\r\n    return this.request('/api/estatisticas');\r\n  }\r\n}\r\n\r\nexport default new ApiService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}